{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"\u00b6 What is Emmet \u00b6 Emmet is a toolkit of packages designed to build the Materials API. The Materials API is the specification of the Materials Project for defining and dissemenating \"materials documents\". The core document definitions live in emmet-core . The data pipelines that build these documents live in emmet-builders . A specialized multi-functional CLI to manage the orchestration of calculation ingestion, backup, and parsing is in emmet-cli . Emmet has been developed by the Materials Project (MP) team at Lawrence Berkeley Labs. Emmet is written in Python and supports Python 3.6+. Installation from PyPI \u00b6 Emmet is a toolkit. Due to a refactoring, emmet is in alpha status with no published metapackage. Only emmet-core is published on the Python Package Index . The preferred tool for installing packages from PyPi is pip . This tool is provided with all modern versions of Python. Open your terminal and run the following command. pip install --upgrade emmet-core Installation from source \u00b6 You can install Maggma directly from a clone of the Git repository . This can be done either by cloning the repo and installing from the local clone, or simply installing directly via git . Local Clone git clone https://github.com//materialsproject/emmet cd emmet pip install -e emmet-core/","title":"Home"},{"location":"#_1","text":"","title":""},{"location":"#what-is-emmet","text":"Emmet is a toolkit of packages designed to build the Materials API. The Materials API is the specification of the Materials Project for defining and dissemenating \"materials documents\". The core document definitions live in emmet-core . The data pipelines that build these documents live in emmet-builders . A specialized multi-functional CLI to manage the orchestration of calculation ingestion, backup, and parsing is in emmet-cli . Emmet has been developed by the Materials Project (MP) team at Lawrence Berkeley Labs. Emmet is written in Python and supports Python 3.6+.","title":"What is Emmet"},{"location":"#installation-from-pypi","text":"Emmet is a toolkit. Due to a refactoring, emmet is in alpha status with no published metapackage. Only emmet-core is published on the Python Package Index . The preferred tool for installing packages from PyPi is pip . This tool is provided with all modern versions of Python. Open your terminal and run the following command. pip install --upgrade emmet-core","title":"Installation from PyPI"},{"location":"#installation-from-source","text":"You can install Maggma directly from a clone of the Git repository . This can be done either by cloning the repo and installing from the local clone, or simply installing directly via git . Local Clone git clone https://github.com//materialsproject/emmet cd emmet pip install -e emmet-core/","title":"Installation from source"},{"location":"core/","text":"Emmet-Core \u00b6 The core module defines the data models for the Materials API (MAPI): \u00b6 CrystalSystem \u00b6 The crystal system of the lattice SymmetryData pydantic \u00b6 Defines a symmetry data set for materials documents crystal_system: CrystalSystem field pydantic \u00b6 The crystal system for this lattice number: int field pydantic \u00b6 The spacegroup number for the lattice point_group: str field pydantic \u00b6 The point group for the lattice symbol: str field pydantic \u00b6 The spacegroup symbol for the lattice symprec: float field pydantic \u00b6 The precision given to spglib to determine the symmetry of this lattice \u00b6 Core definition of Structure metadata StructureMetadata pydantic \u00b6 Mix-in class for structure metadata chemsys: str field pydantic \u00b6 dash-delimited string of elements in the material composition: Composition field pydantic \u00b6 Full composition for the material composition_reduced: Composition field pydantic \u00b6 Simplified representation of the composition density: float field pydantic \u00b6 Density in grams per cm^3 density_atomic: float field pydantic \u00b6 The atomic packing density in atoms per cm^3 elements: Element field pydantic \u00b6 List of elements in the material formula_anonymous: str field pydantic \u00b6 Anonymized representation of the formula formula_pretty: str field pydantic \u00b6 Cleaned representation of the formula nsites: int field pydantic \u00b6 Total number of sites in the structure symmetry: SymmetryData field pydantic \u00b6 Symmetry data for this material volume: float field pydantic \u00b6 Total volume for this structure in Angstroms^3 \u00b6 core \u00b6 Core definition of a Materials Document MaterialsDoc pydantic \u00b6 Definition for a full Materials Document Subsections can be defined by other builders calc_types: str field pydantic \u00b6 Calculation types for all the calculations that make up this material chemsys: str field pydantic \u00b6 dash-delimited string of elements in the material composition: Composition field pydantic \u00b6 Full composition for the material composition_reduced: Composition field pydantic \u00b6 Simplified representation of the composition created_at: datetime field pydantic \u00b6 Timestamp for the first calculation for this Material document density: float field pydantic \u00b6 Density in grams per cm^3 density_atomic: float field pydantic \u00b6 The atomic packing density in atoms per cm^3 deprecated: bool field pydantic \u00b6 Whether this materials document is deprecated due to a lack of high enough quality calculation. elements: Element field pydantic \u00b6 List of elements in the material formula_anonymous: str field pydantic \u00b6 Anonymized representation of the formula formula_pretty: str field pydantic \u00b6 Cleaned representation of the formula initial_structures: Structure field pydantic \u00b6 Initial structures used in the DFT optimizations corresponding to this material last_updated: datetime field pydantic \u00b6 Timestamp for the most recent calculation for this Material document material_id: str field pydantic required \u00b6 The ID of this material, used as a universal reference across proeprty documents.This comes in the form: mp- * * nsites: int field pydantic \u00b6 Total number of sites in the structure ordering: Ordering field pydantic \u00b6 Magnetic Ordering for this structure origins: PropertyOrigin field pydantic \u00b6 Dictionary for tracking the provenance of properties sandboxes: str field pydantic \u00b6 List of sandboxes this material belongs to. Sandboxes provide a way of controlling access to materials. No sandbox means this materials is openly visible structure: Structure field pydantic \u00b6 The best structure for this material symmetry: SymmetryData field pydantic \u00b6 Symmetry data for this material task_ids: str field pydantic \u00b6 List of Calculations IDs used to make this Materials Document volume: float field pydantic \u00b6 Total volume for this structure in Angstroms^3 warnings: str field pydantic \u00b6 Any warnings related to this material from_structure ( structure , material_id , fields = None , ** kwargs ) staticmethod \u00b6 Builds a materials document using the minimal amount of information Source code in core/material/core.py 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 @staticmethod def from_structure ( # type: ignore[override] structure : Structure , material_id : str , fields : Optional [ List [ str ]] = None , ** kwargs ) -> \"MaterialsDoc\" : \"\"\" Builds a materials document using the minimal amount of information \"\"\" meta = StructureMetadata . from_structure ( structure , fields = fields ) ordering = CollinearMagneticStructureAnalyzer ( structure ) . ordering kwargs . update ( ** meta . dict ()) if \"last_updated\" not in kwargs : kwargs [ \"last_updated\" ] = datetime . utcnow () if \"created_at\" not in kwargs : kwargs [ \"created_at\" ] = datetime . utcnow () return MaterialsDoc ( structure = structure , material_id = material_id , ordering = ordering , ** kwargs ) PropertyOrigin pydantic \u00b6 Provenance document for the origin of properties in a material document last_updated: datetime field pydantic required \u00b6 The timestamp when this calculation was last updated name: str field pydantic required \u00b6 The materials document property task_id: str field pydantic required \u00b6 The calculation ID this property comes from task_type: str field pydantic required \u00b6 The original calculation type this propeprty comes from property \u00b6 Core definition of a Materials Document MaterialsProperty pydantic \u00b6 Base model definition for any singular materials property. This may contain any amount of structure metadata for the purpose of search This is intended to be inherited and extended not used directly chemsys: str field pydantic \u00b6 dash-delimited string of elements in the material composition: Composition field pydantic \u00b6 Full composition for the material composition_reduced: Composition field pydantic \u00b6 Simplified representation of the composition density: float field pydantic \u00b6 Density in grams per cm^3 density_atomic: float field pydantic \u00b6 The atomic packing density in atoms per cm^3 elements: Element field pydantic \u00b6 List of elements in the material formula_anonymous: str field pydantic \u00b6 Anonymized representation of the formula formula_pretty: str field pydantic \u00b6 Cleaned representation of the formula last_updated: datetime field pydantic \u00b6 Timestamp for the most recent calculation update for this property material_id: str field pydantic required \u00b6 The ID of the material, used as a universal reference across proeprty documents.This comes in the form: mp- * * nsites: int field pydantic \u00b6 Total number of sites in the structure origins: PropertyOrigin field pydantic \u00b6 Dictionary for tracking the provenance of properties sandboxes: str field pydantic \u00b6 List of sandboxes this material belongs to. Sandboxes provide a way of controlling access to materials. No sandbox means this materials is openly visible symmetry: SymmetryData field pydantic \u00b6 Symmetry data for this material volume: float field pydantic \u00b6 Total volume for this structure in Angstroms^3 warnings: str field pydantic \u00b6 Any warnings related to this property __class_getitem__ ( parameters ) classmethod special \u00b6 Enables generating dynamic sub types of MaterialDocument Can provide either 1 BaseModel class or any number of BaseModel classes if proceeded by a string Source code in core/material/property.py 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 @classmethod def __class_getitem__ ( cls , parameters ): \"\"\" Enables generating dynamic sub types of MaterialDocument Can provide either 1 BaseModel class or any number of BaseModel classes if proceeded by a string \"\"\" model_name = None subdocs = {} if parameters == (): raise TypeError ( \"Cannot make a Material Property of no sub documents\" ) if not isinstance ( parameters , tuple ): if issubclass ( parameters , PropertyDoc ): model_name = f \" { parameters . property_name . title () } Doc\" subdocs = { parameters . property_name : ( parameters , None )} else : raise ValueError ( \"Must provide PropertyDocs\" ) elif len ( parameters > 1 ): if not isinstance ( parameters [ 0 ], str ): raise ValueError ( \"Must provide new document name as the first parameter when making a multi-property document\" ) else : model_name = parameters [ 0 ] parameters = parameters [ 1 :] if not all ( issubclass ( s , PropertyDoc ) for s in parameters ): raise ValueError ( \"Must provide PropertyDocs\" ) subdocs = { s . property_name : ( s , None ) for s in parameters } else : raise ValueError ( \"Must provide at minimum one string for the name and one PropertyDoc subtype\" ) new_model = create_model ( model_name = model_name , __base__ = cls , ** subdocs ) return new_model to_subdoc ( data ) staticmethod \u00b6 Converts to a property subdocument Source code in core/material/property.py 58 59 60 61 62 63 64 65 66 67 68 @staticmethod def to_subdoc ( data : Union [ \"MaterialsProperty\" , Dict ]): \"\"\" Converts to a property subdocument \"\"\" to_remove_fields = set ( MaterialsProperty . __fields__ ) - set ( \"last_updated\" ) subdoc = data . dict () if isinstance ( data , MaterialsProperty ) else data subdoc = { k : v for k , v in subdoc if k not in to_remove_fields } return subdoc PropertyDoc pydantic \u00b6 Prototype document structure for any materials property document \u00b6 Core definition of a Thermo Document Decomposition pydantic \u00b6 Entry metadata for a decomposition process amount: float field pydantic \u00b6 The amount of the decomposed material by formula units this this material decomposes to formula: str field pydantic \u00b6 The formula of the decomposed material this material decomposes to material_id: str field pydantic \u00b6 The material this decomposition points to Thermo pydantic \u00b6 A thermo package block decomposes_to: Decomposition field pydantic \u00b6 List of decomposition data for this material. Only valid for metastable or unstable material. e_above_hull: float field pydantic \u00b6 The energy above the hull in eV/Atom energy: float field pydantic \u00b6 The total DFT energy of this material in eV energy_per_atom: float field pydantic \u00b6 The total DFT energy of this material per atom in eV/atom energy_type: str field pydantic \u00b6 The type of calculation this energy evaluation comes from. TODO: Convert to enum? entries: ComputedEntry field pydantic \u00b6 List of all entries that are valid for this material. The keys for this dictionary are names of various calculation types eq_reaction_e: float field pydantic \u00b6 The reaction energy of a stable entry from the neighboring equilibrium stable materials in eV. Also known as the inverse distance to hull. formation_energy_per_atom: float field pydantic \u00b6 The formation energy per atom in eV/atom is_stable: bool field pydantic \u00b6 Flag for whether this material is on the hull and therefore stable \u00b6 Core definition of a Provenance Document Author pydantic \u00b6 Author information Database \u00b6 Database identifiers for provenance IDs History pydantic \u00b6 History of the material provenance description: ~ VT field pydantic \u00b6 Dictionary of exra data for this history node Provenance pydantic \u00b6 A provenance property block authors: Author field pydantic \u00b6 List of authors for this material bibtex_string: str field pydantic \u00b6 Bibtex reference string for this material created_at: datetime field pydantic \u00b6 creation date for the first structure corresponding to this material database_IDs: List [ str ] field pydantic \u00b6 Database IDs corresponding to this material history: History field pydantic \u00b6 List of history nodes specifying the transformations or orignation of this material projects: str field pydantic \u00b6 List of projects this material belongs to remarks: str field pydantic \u00b6 List of remarks for the provenance of this material theoretical: bool field pydantic \u00b6 If this material has any experimental provenance or not \u00b6 Core definition for Polar property Document Deielectric pydantic \u00b6 A dielectric property block e_electronic: float field pydantic \u00b6 Electric permittivity due to electrons rearrangement e_ionic: float field pydantic \u00b6 Electric permittivity from atomic rearrangement e_total: float field pydantic \u00b6 Total electric permittivity electronic: Tuple [ Tuple [ float , float , float ], Tuple [ float , float , float ], Tuple [ float , float , float ]] field pydantic \u00b6 Dielectric response due to electron rearrangement ionic: Tuple [ Tuple [ float , float , float ], Tuple [ float , float , float ], Tuple [ float , float , float ]] field pydantic \u00b6 Dielectric response due to atomic rearrangement total: Tuple [ Tuple [ float , float , float ], Tuple [ float , float , float ], Tuple [ float , float , float ]] field pydantic \u00b6 Total dielectric response Piezoelectric pydantic \u00b6 A dielectric package block max_direction: Tuple [ int , int , int ] field pydantic \u00b6 Miller direction for maximum piezo response strain_for_max: Tuple [ Tuple [ float , float , float ], Tuple [ float , float , float ], Tuple [ float , float , float ]] field pydantic \u00b6 Normalized strain direction for maximum piezo repsonse","title":"Core"},{"location":"core/#emmet-core","text":"The core module defines the data models for the Materials API (MAPI):","title":"Emmet-Core"},{"location":"core/#emmet.core.symmetry","text":"","title":"emmet.core.symmetry"},{"location":"core/#emmet.core.symmetry.CrystalSystem","text":"The crystal system of the lattice","title":"CrystalSystem"},{"location":"core/#emmet.core.symmetry.SymmetryData","text":"Defines a symmetry data set for materials documents","title":"SymmetryData"},{"location":"core/#emmet.core.symmetry.SymmetryData.crystal_system","text":"The crystal system for this lattice","title":"crystal_system"},{"location":"core/#emmet.core.symmetry.SymmetryData.number","text":"The spacegroup number for the lattice","title":"number"},{"location":"core/#emmet.core.symmetry.SymmetryData.point_group","text":"The point group for the lattice","title":"point_group"},{"location":"core/#emmet.core.symmetry.SymmetryData.symbol","text":"The spacegroup symbol for the lattice","title":"symbol"},{"location":"core/#emmet.core.symmetry.SymmetryData.symprec","text":"The precision given to spglib to determine the symmetry of this lattice","title":"symprec"},{"location":"core/#emmet.core.structure","text":"Core definition of Structure metadata","title":"emmet.core.structure"},{"location":"core/#emmet.core.structure.StructureMetadata","text":"Mix-in class for structure metadata","title":"StructureMetadata"},{"location":"core/#emmet.core.structure.StructureMetadata.chemsys","text":"dash-delimited string of elements in the material","title":"chemsys"},{"location":"core/#emmet.core.structure.StructureMetadata.composition","text":"Full composition for the material","title":"composition"},{"location":"core/#emmet.core.structure.StructureMetadata.composition_reduced","text":"Simplified representation of the composition","title":"composition_reduced"},{"location":"core/#emmet.core.structure.StructureMetadata.density","text":"Density in grams per cm^3","title":"density"},{"location":"core/#emmet.core.structure.StructureMetadata.density_atomic","text":"The atomic packing density in atoms per cm^3","title":"density_atomic"},{"location":"core/#emmet.core.structure.StructureMetadata.elements","text":"List of elements in the material","title":"elements"},{"location":"core/#emmet.core.structure.StructureMetadata.formula_anonymous","text":"Anonymized representation of the formula","title":"formula_anonymous"},{"location":"core/#emmet.core.structure.StructureMetadata.formula_pretty","text":"Cleaned representation of the formula","title":"formula_pretty"},{"location":"core/#emmet.core.structure.StructureMetadata.nsites","text":"Total number of sites in the structure","title":"nsites"},{"location":"core/#emmet.core.structure.StructureMetadata.symmetry","text":"Symmetry data for this material","title":"symmetry"},{"location":"core/#emmet.core.structure.StructureMetadata.volume","text":"Total volume for this structure in Angstroms^3","title":"volume"},{"location":"core/#emmet.core.material","text":"","title":"emmet.core.material"},{"location":"core/#emmet.core.material.core","text":"Core definition of a Materials Document","title":"core"},{"location":"core/#emmet.core.material.core.MaterialsDoc","text":"Definition for a full Materials Document Subsections can be defined by other builders","title":"MaterialsDoc"},{"location":"core/#emmet.core.material.core.MaterialsDoc.calc_types","text":"Calculation types for all the calculations that make up this material","title":"calc_types"},{"location":"core/#emmet.core.material.core.MaterialsDoc.chemsys","text":"dash-delimited string of elements in the material","title":"chemsys"},{"location":"core/#emmet.core.material.core.MaterialsDoc.composition","text":"Full composition for the material","title":"composition"},{"location":"core/#emmet.core.material.core.MaterialsDoc.composition_reduced","text":"Simplified representation of the composition","title":"composition_reduced"},{"location":"core/#emmet.core.material.core.MaterialsDoc.created_at","text":"Timestamp for the first calculation for this Material document","title":"created_at"},{"location":"core/#emmet.core.material.core.MaterialsDoc.density","text":"Density in grams per cm^3","title":"density"},{"location":"core/#emmet.core.material.core.MaterialsDoc.density_atomic","text":"The atomic packing density in atoms per cm^3","title":"density_atomic"},{"location":"core/#emmet.core.material.core.MaterialsDoc.deprecated","text":"Whether this materials document is deprecated due to a lack of high enough quality calculation.","title":"deprecated"},{"location":"core/#emmet.core.material.core.MaterialsDoc.elements","text":"List of elements in the material","title":"elements"},{"location":"core/#emmet.core.material.core.MaterialsDoc.formula_anonymous","text":"Anonymized representation of the formula","title":"formula_anonymous"},{"location":"core/#emmet.core.material.core.MaterialsDoc.formula_pretty","text":"Cleaned representation of the formula","title":"formula_pretty"},{"location":"core/#emmet.core.material.core.MaterialsDoc.initial_structures","text":"Initial structures used in the DFT optimizations corresponding to this material","title":"initial_structures"},{"location":"core/#emmet.core.material.core.MaterialsDoc.last_updated","text":"Timestamp for the most recent calculation for this Material document","title":"last_updated"},{"location":"core/#emmet.core.material.core.MaterialsDoc.material_id","text":"The ID of this material, used as a universal reference across proeprty documents.This comes in the form: mp- * *","title":"material_id"},{"location":"core/#emmet.core.material.core.MaterialsDoc.nsites","text":"Total number of sites in the structure","title":"nsites"},{"location":"core/#emmet.core.material.core.MaterialsDoc.ordering","text":"Magnetic Ordering for this structure","title":"ordering"},{"location":"core/#emmet.core.material.core.MaterialsDoc.origins","text":"Dictionary for tracking the provenance of properties","title":"origins"},{"location":"core/#emmet.core.material.core.MaterialsDoc.sandboxes","text":"List of sandboxes this material belongs to. Sandboxes provide a way of controlling access to materials. No sandbox means this materials is openly visible","title":"sandboxes"},{"location":"core/#emmet.core.material.core.MaterialsDoc.structure","text":"The best structure for this material","title":"structure"},{"location":"core/#emmet.core.material.core.MaterialsDoc.symmetry","text":"Symmetry data for this material","title":"symmetry"},{"location":"core/#emmet.core.material.core.MaterialsDoc.task_ids","text":"List of Calculations IDs used to make this Materials Document","title":"task_ids"},{"location":"core/#emmet.core.material.core.MaterialsDoc.volume","text":"Total volume for this structure in Angstroms^3","title":"volume"},{"location":"core/#emmet.core.material.core.MaterialsDoc.warnings","text":"Any warnings related to this material","title":"warnings"},{"location":"core/#emmet.core.material.core.MaterialsDoc.from_structure","text":"Builds a materials document using the minimal amount of information Source code in core/material/core.py 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 @staticmethod def from_structure ( # type: ignore[override] structure : Structure , material_id : str , fields : Optional [ List [ str ]] = None , ** kwargs ) -> \"MaterialsDoc\" : \"\"\" Builds a materials document using the minimal amount of information \"\"\" meta = StructureMetadata . from_structure ( structure , fields = fields ) ordering = CollinearMagneticStructureAnalyzer ( structure ) . ordering kwargs . update ( ** meta . dict ()) if \"last_updated\" not in kwargs : kwargs [ \"last_updated\" ] = datetime . utcnow () if \"created_at\" not in kwargs : kwargs [ \"created_at\" ] = datetime . utcnow () return MaterialsDoc ( structure = structure , material_id = material_id , ordering = ordering , ** kwargs )","title":"from_structure()"},{"location":"core/#emmet.core.material.core.PropertyOrigin","text":"Provenance document for the origin of properties in a material document","title":"PropertyOrigin"},{"location":"core/#emmet.core.material.core.PropertyOrigin.last_updated","text":"The timestamp when this calculation was last updated","title":"last_updated"},{"location":"core/#emmet.core.material.core.PropertyOrigin.name","text":"The materials document property","title":"name"},{"location":"core/#emmet.core.material.core.PropertyOrigin.task_id","text":"The calculation ID this property comes from","title":"task_id"},{"location":"core/#emmet.core.material.core.PropertyOrigin.task_type","text":"The original calculation type this propeprty comes from","title":"task_type"},{"location":"core/#emmet.core.material.property","text":"Core definition of a Materials Document","title":"property"},{"location":"core/#emmet.core.material.property.MaterialsProperty","text":"Base model definition for any singular materials property. This may contain any amount of structure metadata for the purpose of search This is intended to be inherited and extended not used directly","title":"MaterialsProperty"},{"location":"core/#emmet.core.material.property.MaterialsProperty.chemsys","text":"dash-delimited string of elements in the material","title":"chemsys"},{"location":"core/#emmet.core.material.property.MaterialsProperty.composition","text":"Full composition for the material","title":"composition"},{"location":"core/#emmet.core.material.property.MaterialsProperty.composition_reduced","text":"Simplified representation of the composition","title":"composition_reduced"},{"location":"core/#emmet.core.material.property.MaterialsProperty.density","text":"Density in grams per cm^3","title":"density"},{"location":"core/#emmet.core.material.property.MaterialsProperty.density_atomic","text":"The atomic packing density in atoms per cm^3","title":"density_atomic"},{"location":"core/#emmet.core.material.property.MaterialsProperty.elements","text":"List of elements in the material","title":"elements"},{"location":"core/#emmet.core.material.property.MaterialsProperty.formula_anonymous","text":"Anonymized representation of the formula","title":"formula_anonymous"},{"location":"core/#emmet.core.material.property.MaterialsProperty.formula_pretty","text":"Cleaned representation of the formula","title":"formula_pretty"},{"location":"core/#emmet.core.material.property.MaterialsProperty.last_updated","text":"Timestamp for the most recent calculation update for this property","title":"last_updated"},{"location":"core/#emmet.core.material.property.MaterialsProperty.material_id","text":"The ID of the material, used as a universal reference across proeprty documents.This comes in the form: mp- * *","title":"material_id"},{"location":"core/#emmet.core.material.property.MaterialsProperty.nsites","text":"Total number of sites in the structure","title":"nsites"},{"location":"core/#emmet.core.material.property.MaterialsProperty.origins","text":"Dictionary for tracking the provenance of properties","title":"origins"},{"location":"core/#emmet.core.material.property.MaterialsProperty.sandboxes","text":"List of sandboxes this material belongs to. Sandboxes provide a way of controlling access to materials. No sandbox means this materials is openly visible","title":"sandboxes"},{"location":"core/#emmet.core.material.property.MaterialsProperty.symmetry","text":"Symmetry data for this material","title":"symmetry"},{"location":"core/#emmet.core.material.property.MaterialsProperty.volume","text":"Total volume for this structure in Angstroms^3","title":"volume"},{"location":"core/#emmet.core.material.property.MaterialsProperty.warnings","text":"Any warnings related to this property","title":"warnings"},{"location":"core/#emmet.core.material.property.MaterialsProperty.__class_getitem__","text":"Enables generating dynamic sub types of MaterialDocument Can provide either 1 BaseModel class or any number of BaseModel classes if proceeded by a string Source code in core/material/property.py 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 @classmethod def __class_getitem__ ( cls , parameters ): \"\"\" Enables generating dynamic sub types of MaterialDocument Can provide either 1 BaseModel class or any number of BaseModel classes if proceeded by a string \"\"\" model_name = None subdocs = {} if parameters == (): raise TypeError ( \"Cannot make a Material Property of no sub documents\" ) if not isinstance ( parameters , tuple ): if issubclass ( parameters , PropertyDoc ): model_name = f \" { parameters . property_name . title () } Doc\" subdocs = { parameters . property_name : ( parameters , None )} else : raise ValueError ( \"Must provide PropertyDocs\" ) elif len ( parameters > 1 ): if not isinstance ( parameters [ 0 ], str ): raise ValueError ( \"Must provide new document name as the first parameter when making a multi-property document\" ) else : model_name = parameters [ 0 ] parameters = parameters [ 1 :] if not all ( issubclass ( s , PropertyDoc ) for s in parameters ): raise ValueError ( \"Must provide PropertyDocs\" ) subdocs = { s . property_name : ( s , None ) for s in parameters } else : raise ValueError ( \"Must provide at minimum one string for the name and one PropertyDoc subtype\" ) new_model = create_model ( model_name = model_name , __base__ = cls , ** subdocs ) return new_model","title":"__class_getitem__()"},{"location":"core/#emmet.core.material.property.MaterialsProperty.to_subdoc","text":"Converts to a property subdocument Source code in core/material/property.py 58 59 60 61 62 63 64 65 66 67 68 @staticmethod def to_subdoc ( data : Union [ \"MaterialsProperty\" , Dict ]): \"\"\" Converts to a property subdocument \"\"\" to_remove_fields = set ( MaterialsProperty . __fields__ ) - set ( \"last_updated\" ) subdoc = data . dict () if isinstance ( data , MaterialsProperty ) else data subdoc = { k : v for k , v in subdoc if k not in to_remove_fields } return subdoc","title":"to_subdoc()"},{"location":"core/#emmet.core.material.property.PropertyDoc","text":"Prototype document structure for any materials property document","title":"PropertyDoc"},{"location":"core/#emmet.core.thermo","text":"Core definition of a Thermo Document","title":"emmet.core.thermo"},{"location":"core/#emmet.core.thermo.Decomposition","text":"Entry metadata for a decomposition process","title":"Decomposition"},{"location":"core/#emmet.core.thermo.Decomposition.amount","text":"The amount of the decomposed material by formula units this this material decomposes to","title":"amount"},{"location":"core/#emmet.core.thermo.Decomposition.formula","text":"The formula of the decomposed material this material decomposes to","title":"formula"},{"location":"core/#emmet.core.thermo.Decomposition.material_id","text":"The material this decomposition points to","title":"material_id"},{"location":"core/#emmet.core.thermo.Thermo","text":"A thermo package block","title":"Thermo"},{"location":"core/#emmet.core.thermo.Thermo.decomposes_to","text":"List of decomposition data for this material. Only valid for metastable or unstable material.","title":"decomposes_to"},{"location":"core/#emmet.core.thermo.Thermo.e_above_hull","text":"The energy above the hull in eV/Atom","title":"e_above_hull"},{"location":"core/#emmet.core.thermo.Thermo.energy","text":"The total DFT energy of this material in eV","title":"energy"},{"location":"core/#emmet.core.thermo.Thermo.energy_per_atom","text":"The total DFT energy of this material per atom in eV/atom","title":"energy_per_atom"},{"location":"core/#emmet.core.thermo.Thermo.energy_type","text":"The type of calculation this energy evaluation comes from. TODO: Convert to enum?","title":"energy_type"},{"location":"core/#emmet.core.thermo.Thermo.entries","text":"List of all entries that are valid for this material. The keys for this dictionary are names of various calculation types","title":"entries"},{"location":"core/#emmet.core.thermo.Thermo.eq_reaction_e","text":"The reaction energy of a stable entry from the neighboring equilibrium stable materials in eV. Also known as the inverse distance to hull.","title":"eq_reaction_e"},{"location":"core/#emmet.core.thermo.Thermo.formation_energy_per_atom","text":"The formation energy per atom in eV/atom","title":"formation_energy_per_atom"},{"location":"core/#emmet.core.thermo.Thermo.is_stable","text":"Flag for whether this material is on the hull and therefore stable","title":"is_stable"},{"location":"core/#emmet.core.provenance","text":"Core definition of a Provenance Document","title":"emmet.core.provenance"},{"location":"core/#emmet.core.provenance.Author","text":"Author information","title":"Author"},{"location":"core/#emmet.core.provenance.Database","text":"Database identifiers for provenance IDs","title":"Database"},{"location":"core/#emmet.core.provenance.History","text":"History of the material provenance","title":"History"},{"location":"core/#emmet.core.provenance.History.description","text":"Dictionary of exra data for this history node","title":"description"},{"location":"core/#emmet.core.provenance.Provenance","text":"A provenance property block","title":"Provenance"},{"location":"core/#emmet.core.provenance.Provenance.authors","text":"List of authors for this material","title":"authors"},{"location":"core/#emmet.core.provenance.Provenance.bibtex_string","text":"Bibtex reference string for this material","title":"bibtex_string"},{"location":"core/#emmet.core.provenance.Provenance.created_at","text":"creation date for the first structure corresponding to this material","title":"created_at"},{"location":"core/#emmet.core.provenance.Provenance.database_IDs","text":"Database IDs corresponding to this material","title":"database_IDs"},{"location":"core/#emmet.core.provenance.Provenance.history","text":"List of history nodes specifying the transformations or orignation of this material","title":"history"},{"location":"core/#emmet.core.provenance.Provenance.projects","text":"List of projects this material belongs to","title":"projects"},{"location":"core/#emmet.core.provenance.Provenance.remarks","text":"List of remarks for the provenance of this material","title":"remarks"},{"location":"core/#emmet.core.provenance.Provenance.theoretical","text":"If this material has any experimental provenance or not","title":"theoretical"},{"location":"core/#emmet.core.polar","text":"Core definition for Polar property Document","title":"emmet.core.polar"},{"location":"core/#emmet.core.polar.Deielectric","text":"A dielectric property block","title":"Deielectric"},{"location":"core/#emmet.core.polar.Deielectric.e_electronic","text":"Electric permittivity due to electrons rearrangement","title":"e_electronic"},{"location":"core/#emmet.core.polar.Deielectric.e_ionic","text":"Electric permittivity from atomic rearrangement","title":"e_ionic"},{"location":"core/#emmet.core.polar.Deielectric.e_total","text":"Total electric permittivity","title":"e_total"},{"location":"core/#emmet.core.polar.Deielectric.electronic","text":"Dielectric response due to electron rearrangement","title":"electronic"},{"location":"core/#emmet.core.polar.Deielectric.ionic","text":"Dielectric response due to atomic rearrangement","title":"ionic"},{"location":"core/#emmet.core.polar.Deielectric.total","text":"Total dielectric response","title":"total"},{"location":"core/#emmet.core.polar.Piezoelectric","text":"A dielectric package block","title":"Piezoelectric"},{"location":"core/#emmet.core.polar.Piezoelectric.max_direction","text":"Miller direction for maximum piezo response","title":"max_direction"},{"location":"core/#emmet.core.polar.Piezoelectric.strain_for_max","text":"Normalized strain direction for maximum piezo repsonse","title":"strain_for_max"},{"location":"packages/","text":"Packages \u00b6 emmet is a toolkit of packages that are used in conjunction to create the Materials API (MAPI) from raw calculations on disk. The following package make up this toolkit. emmet-core \u00b6 This is the core package for the emmet ecosystem. emmet.core is where data models are defined. These data models are the most important part of emmet since they dictate what all the other packages have to use, serve, or compute. There is an additional emmet.stubs module that provides pydantic compatible stubs for various datatypes commonly used in emmet . Many of these are from pymatgen . These stubs are 100% functional in-place, meaning they can be used as they would be from pymatgen. The stubs provide additional metadata for the models in emmet to use for validation and better documentation. emmet-cli \u00b6 Many of the operations in emmet are complex. These range from backing up calculations, to parsing, to setting of build chains, to starting workflows. Since these processes are pretty standard, the emmet ecosystem provides a CLI implemented in emmet.cli . This makes managing MAPI much easier. emmet-builders \u00b6 The data served via MAPI has to computed via data pipelines. emmet.builders defines these operations using the maggma framework to enable well constructed data access, multi- and distributed processing, reporting, and automatic incremental computation.","title":"Packages"},{"location":"packages/#packages","text":"emmet is a toolkit of packages that are used in conjunction to create the Materials API (MAPI) from raw calculations on disk. The following package make up this toolkit.","title":"Packages"},{"location":"packages/#emmet-core","text":"This is the core package for the emmet ecosystem. emmet.core is where data models are defined. These data models are the most important part of emmet since they dictate what all the other packages have to use, serve, or compute. There is an additional emmet.stubs module that provides pydantic compatible stubs for various datatypes commonly used in emmet . Many of these are from pymatgen . These stubs are 100% functional in-place, meaning they can be used as they would be from pymatgen. The stubs provide additional metadata for the models in emmet to use for validation and better documentation.","title":"emmet-core"},{"location":"packages/#emmet-cli","text":"Many of the operations in emmet are complex. These range from backing up calculations, to parsing, to setting of build chains, to starting workflows. Since these processes are pretty standard, the emmet ecosystem provides a CLI implemented in emmet.cli . This makes managing MAPI much easier.","title":"emmet-cli"},{"location":"packages/#emmet-builders","text":"The data served via MAPI has to computed via data pipelines. emmet.builders defines these operations using the maggma framework to enable well constructed data access, multi- and distributed processing, reporting, and automatic incremental computation.","title":"emmet-builders"},{"location":"settings/","text":"Settings Management \u00b6 emmet has a flexible settings management system based on Pydantic's BaseSetting . A core EmmetSettings class is used to define a data model for settings. EmmetSettings will automatically use the emmet_config_path environment variable (defaults to $HOME/.emmet.json ) to load the settings for the whole emmet system. By inheriting from this class, any subpackage automatically gets this core loading feature. Example: from pydantic import Field from emmet.settings import EmmetSettings class MySettings ( EmmetSettings ): my_new_setting : int = Field ( 3 , description = \"A custom setting\" ) Now any instance of MySettings will automatically load the configuration file and use that to initialize this setting. Using the magic of pydantic BaseSettings , these settings can also be set using environment variables prefixed by EMMET_ . export EMMET_MY_NEW_SETTING = 4","title":"Settings"},{"location":"settings/#settings-management","text":"emmet has a flexible settings management system based on Pydantic's BaseSetting . A core EmmetSettings class is used to define a data model for settings. EmmetSettings will automatically use the emmet_config_path environment variable (defaults to $HOME/.emmet.json ) to load the settings for the whole emmet system. By inheriting from this class, any subpackage automatically gets this core loading feature. Example: from pydantic import Field from emmet.settings import EmmetSettings class MySettings ( EmmetSettings ): my_new_setting : int = Field ( 3 , description = \"A custom setting\" ) Now any instance of MySettings will automatically load the configuration file and use that to initialize this setting. Using the magic of pydantic BaseSettings , these settings can also be set using environment variables prefixed by EMMET_ . export EMMET_MY_NEW_SETTING = 4","title":"Settings Management"},{"location":"stubs/","text":"Stubs \u00b6 emmet uses pydantic classes to define the data models that get built and dissemenated via the emmet toolkit. Many of these datatypes are built in structures in other packages that don't have the full functionality of type hints that pydantic would like to use. emmet.stubs provides fully functioning stub implementations. These classes can be used just as the original classes with all of their methods and attributes. They provide built in descriptions and schema when these data models are used for the API or validation.","title":"Stubs"},{"location":"stubs/#stubs","text":"emmet uses pydantic classes to define the data models that get built and dissemenated via the emmet toolkit. Many of these datatypes are built in structures in other packages that don't have the full functionality of type hints that pydantic would like to use. emmet.stubs provides fully functioning stub implementations. These classes can be used just as the original classes with all of their methods and attributes. They provide built in descriptions and schema when these data models are used for the API or validation.","title":"Stubs"}]}