{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"\u00b6 What is Emmet \u00b6 Emmet is a toolkit of packages designed to build the Materials API. The Materials API is the specification of the Materials Project for defining and dissemenating \"materials documents\". The core document definitions live in emmet-core . The data pipelines that build these documents live in emmet-builders . A specialized multi-functional CLI to manage the orchestration of calculation ingestion, backup, and parsing is in emmet-cli . Emmet has been developed by the Materials Project (MP) team at Lawrence Berkeley Labs. Emmet is written in Python and supports Python 3.6+. Installation from PyPI \u00b6 Emmet is a toolkit. Due to a refactoring, emmet is in alpha status with no published metapackage. Only emmet-core is published on the Python Package Index . The preferred tool for installing packages from PyPi is pip . This tool is provided with all modern versions of Python. Open your terminal and run the following command. pip install --upgrade emmet-core Installation from source \u00b6 You can install Maggma directly from a clone of the Git repository . This can be done either by cloning the repo and installing from the local clone, or simply installing directly via git . shell tab=\"Local Clone\" git clone https://github.com//materialsproject/emmet cd emmet pip install -e emmet-core/","title":"Home"},{"location":"#_1","text":"","title":""},{"location":"#what-is-emmet","text":"Emmet is a toolkit of packages designed to build the Materials API. The Materials API is the specification of the Materials Project for defining and dissemenating \"materials documents\". The core document definitions live in emmet-core . The data pipelines that build these documents live in emmet-builders . A specialized multi-functional CLI to manage the orchestration of calculation ingestion, backup, and parsing is in emmet-cli . Emmet has been developed by the Materials Project (MP) team at Lawrence Berkeley Labs. Emmet is written in Python and supports Python 3.6+.","title":"What is Emmet"},{"location":"#installation-from-pypi","text":"Emmet is a toolkit. Due to a refactoring, emmet is in alpha status with no published metapackage. Only emmet-core is published on the Python Package Index . The preferred tool for installing packages from PyPi is pip . This tool is provided with all modern versions of Python. Open your terminal and run the following command. pip install --upgrade emmet-core","title":"Installation from PyPI"},{"location":"#installation-from-source","text":"You can install Maggma directly from a clone of the Git repository . This can be done either by cloning the repo and installing from the local clone, or simply installing directly via git . shell tab=\"Local Clone\" git clone https://github.com//materialsproject/emmet cd emmet pip install -e emmet-core/","title":"Installation from source"},{"location":"CHANGELOG/","text":"Changelog \u00b6 v0.9.1 (2021-07-26) \u00b6 Full Changelog Merged pull requests: Revert structure back to using computed structure #239 ( shyamd ) v0.9.0 (2021-07-23) \u00b6 Full Changelog Closed issues: Fix and standardize settings context var #237 Build data in document model #232 Thoughts on having StructureNL instead of Structure in canonical materials structure field? #97 Merged pull requests: New EmmetBaseModel #235 ( shyamd ) Substrates #231 ( shyamd ) Optimade Materials Doc #230 ( shyamd ) v0.8.3 (2021-07-20) \u00b6 Full Changelog Fixed bugs: Oxidation state composition fields not serialized properly #216 Closed issues: Feature Request: Robocrystallographer #208 Rotate structure to standard convention #111 Returned docs too large for common API queries (third-order elasticity) #76 Merged pull requests: Better Provenance Management #228 ( shyamd ) v0.8.2 (2021-07-16) \u00b6 Full Changelog Merged pull requests: Summary field bug fix #226 ( munrojm ) v0.8.1 (2021-07-15) \u00b6 Full Changelog Merged pull requests: Rename summary stats model #225 ( munrojm ) v0.8.0 (2021-07-15) \u00b6 Full Changelog Merged pull requests: Electronic structure and search builder updates #221 ( munrojm ) v0.7.2 (2021-07-15) \u00b6 Full Changelog Merged pull requests: Fix Deprecated Materials Speed #224 ( shyamd ) v0.7.1 (2021-07-13) \u00b6 Full Changelog v0.7.0 (2021-07-13) \u00b6 Full Changelog Merged pull requests: Robocrystallographer document #222 ( shyamd ) v0.6.0 (2021-07-12) \u00b6 Full Changelog Merged pull requests: Add Deprecated Materials to MaterialsDoc construction #220 ( shyamd ) Fix provenance #219 ( shyamd ) v0.5.0 (2021-07-02) \u00b6 Full Changelog Merged pull requests: Fix Validation #215 ( shyamd ) v0.4.1 (2021-06-27) \u00b6 Full Changelog Merged pull requests: Fix oxidation doc composition #217 ( shyamd ) v0.4.0 (2021-06-24) \u00b6 Full Changelog Merged pull requests: Add R2SCAN to run_types #214 ( shyamd ) v0.3.6 (2021-06-24) \u00b6 Full Changelog Merged pull requests: Fix projection for vasp run_type determination #213 ( shyamd ) v0.3.5 (2021-06-24) \u00b6 Full Changelog Merged pull requests: Fix run_type in validation #212 ( shyamd ) v0.3.4 (2021-06-23) \u00b6 Full Changelog Merged pull requests: Bug: Reference the last calculation to determine run_type #211 ( shyamd ) v0.3.3 (2021-06-23) \u00b6 Full Changelog Merged pull requests: Remove bson package requirement #209 ( shyamd ) v0.3.2 (2021-06-21) \u00b6 Full Changelog Merged pull requests: Electronic Structure model and builder fixes #206 ( munrojm ) v0.3.1 (2021-06-21) \u00b6 Full Changelog Merged pull requests: Use deprecated tasks in Materials Builder #207 ( shyamd ) v0.3.0 (2021-06-16) \u00b6 Full Changelog Merged pull requests: Release Emmet Builders #205 ( shyamd ) v0.2.4 (2021-06-14) \u00b6 Full Changelog Merged pull requests: Revert materials finding to old pipeline behavior #203 ( shyamd ) v0.2.3 (2021-06-07) \u00b6 Full Changelog Merged pull requests: Fix oxidation document #201 ( shyamd ) v0.2.2 (2021-06-04) \u00b6 Full Changelog v0.2.1 (2021-06-03) \u00b6 Full Changelog Merged pull requests: Reconcile changes on updates branch #199 ( shyamd ) Oxidation State Document #198 ( shyamd ) Move XAS Logic into document and clean up builder #197 ( shyamd ) Electronic structure and search components #189 ( munrojm ) v0.2.0 (2021-05-10) \u00b6 Full Changelog Closed issues: Bug: set's get serialized into set() rather than a list #183 task_type is moved to vasp/calc_type #121 Merged pull requests: various fixes to structure grouper an electrode documents and builders #178 ( jmmshn ) Updated materials and thermo builder #177 ( jmmshn ) Provenance Builder #176 ( shyamd ) relaxed enforced type of orig_input #175 ( jmmshn ) Fix serialization and update validation #174 ( shyamd ) Working Thermo Builder #170 ( jmmshn ) Add SCF gradient and Manual deprecation to VASP validation #169 ( shyamd ) Create MPID Type #167 ( shyamd ) Remove stubs in favor of monty pydantic compatability #165 ( shyamd ) made structure grouper work with material_ids #163 ( jmmshn ) minor changes to get material builder working on non-production databases. #162 ( jmmshn ) Electrode Doc #149 ( jmmshn ) Structure Group Docs and Builder #148 ( jmmshn ) Generate static run-types for IDEs #141 ( shyamd ) Added CrossRef builder #133 ( jmmshn ) Sanitize Enums #132 ( utf ) Use lattice model #131 ( utf ) cli: restoring tasks (bugfixes) #119 ( tschaume ) Emmet-Core Docs #117 ( shyamd ) Initial Documentation Structure #116 ( shyamd ) v0.1.1-alpha (2020-04-19) \u00b6 Full Changelog v0.1-alpha (2020-04-19) \u00b6 Full Changelog Closed issues: Conflicts in electrodes.py #108 Band gaps being reported differently from those described by mapidoc / the old builders #62 KeyError when running lu_field with a store already containing data #45 VaspDrone for emmet? #40 Merged pull requests: fixes for electrode builder #113 ( jmmshn ) Updates for the latest DB release #110 ( shyamd ) Working insertion electrodes builder #109 ( jmmshn ) Production updates for September 2019 #107 ( shyamd ) Update ICSD drone #105 ( kmu ) Change magnetism builder to build from tasks #104 ( mkhorton ) CLI: primitive structures, zip support, SNLs #101 ( tschaume ) Added StructurePredictionBuilder #98 ( mattmcdermott ) WIP: Initial creation of defects emmet builder #95 ( dbroberg ) WIP: Acceptance tests for deprecation guarding etc. #94 ( dwinston ) missing and (how did this work?) #93 ( tschaume ) Fix a bug in bond_valence #92 ( kmu ) bug fix #90 ( jmmshn ) Central repository for global variables #88 ( mkhorton ) WIP March Production Updates #87 ( shyamd ) Fixed sandbox bug and cleaned up #84 ( jmmshn ) Website Updates #82 ( shyamd ) Update to electrode builder to match the data required by the website builder #81 ( jmmshn ) Robocrystallographer audio builder #79 ( dwinston ) Build structure visualization JSON #78 ( mkhorton ) Add robocrys version to builder doc #75 ( utf ) Add robocrystallographer builder #74 ( utf ) [WIP] MPComplete status #73 ( dwinston ) Production Updates #72 ( shyamd ) fix: snl history is a list #70 ( dwinston ) Maggma update #69 ( shyamd ) [WIP] Update magnetic grouping #67 ( mkhorton ) Battery builder (work in progress) #66 ( jmmshn ) Production Updates #65 ( shyamd ) [WIP] Updates to magnetism, bond, mp_website builders, new bond_valence, mp_website_digest builders #64 ( mkhorton ) mp website update for propnet and toecs #63 ( montoyjh ) big elastic PR #61 ( montoyjh ) Added meta data & unit tests #60 ( nisse3000 ) Added composition descritpors for similarity toolbox #59 ( nisse3000 ) Fix 'magnestism' typo #58 ( mkhorton ) Removed min and max statistics from structure fingerprint #57 ( nisse3000 ) Updated site-descriptor calculation to reflect best settings. #56 ( nisse3000 ) [WIP] x-ray absorption spectra builder updates #55 ( dwinston ) Requested site-descriptor changes #53 ( nisse3000 ) Install openbabel in test env #52 ( dwinston ) More Updates for MP Website #49 ( shyamd ) Avoid hardcoding local settings path on serialization #48 ( dwinston ) Added BoltztrapDosBuilder class #42 ( fraricci ) [WIP] Command Line Interface #41 ( tschaume ) v2018.6.7 (2018-06-07) \u00b6 Full Changelog v2018.6.6 (2018-06-06) \u00b6 Full Changelog Merged pull requests: Updates #47 ( shyamd ) Fix diffraction builder. Add test for fixed method. #46 ( dwinston ) Replace TopologyBuilder with BondBuilder #44 ( mkhorton ) Copybuilder additions #43 ( montoyjh ) Massive amounts of refactoring in main builders #39 ( shyamd ) Adaptions to new pymatgen version and requiring most recent pymatgen version #37 ( nisse3000 ) Fixes a few issues in wf builder and elastic builder #36 ( montoyjh ) Copybuilder bug - tqdm doesn't play nicely with next() #35 ( montoyjh ) Add tests for copybuilder. Was using old store attr lu_key . #34 ( dwinston ) README: editable install #33 ( tschaume ) Property workflow builder #32 ( montoyjh ) v2018.4.2 (2018-04-02) \u00b6 Full Changelog Closed issues: A generalized warning generator for task documents? #26 Merged pull requests: Changed site-descriptor data structure & adapted structure similarity builder accordingly #31 ( nisse3000 ) Massive reorganization #28 ( shyamd ) Corrected setup.py #27 ( nisse3000 ) v2018.3.9 (2018-03-09) \u00b6 Full Changelog Closed issues: SurfacePropertiesBuilder #23 Merged pull requests: Massive changeset for Production #25 ( shyamd ) Restructured site-descriptor storage #24 ( nisse3000 ) Added a site-descriptor builder #22 ( nisse3000 ) Builder updates (topology) #21 ( mkhorton ) Compatibility and elastic builders #20 ( montoyjh ) Fix substrates builder #18 ( dwinston ) abinit phonon builder #16 ( gpetretto ) v2018.1.1 (2017-12-16) \u00b6 Full Changelog v2017.11.8 (2017-11-07) \u00b6 Full Changelog Closed issues: PyPi package #2 Merged pull requests: Readme update #15 ( mkhorton ) Initial topology builder #10 ( mkhorton ) Small update to README #9 ( mkhorton ) Small README update #8 ( mkhorton ) ICSD drone #7 ( JPalakapilly ) Fix sample script in README #6 ( mkhorton ) Minor doc update #5 ( mkhorton ) Initial commit for some documentation (in progress) #4 ( mkhorton ) Materials builder #3 ( shyamd ) Task tagger #1 ( shyamd ) * This Changelog was automatically generated by github_changelog_generator","title":"Changelog"},{"location":"CHANGELOG/#changelog","text":"","title":"Changelog"},{"location":"CHANGELOG/#v091-2021-07-26","text":"Full Changelog Merged pull requests: Revert structure back to using computed structure #239 ( shyamd )","title":"v0.9.1 (2021-07-26)"},{"location":"CHANGELOG/#v090-2021-07-23","text":"Full Changelog Closed issues: Fix and standardize settings context var #237 Build data in document model #232 Thoughts on having StructureNL instead of Structure in canonical materials structure field? #97 Merged pull requests: New EmmetBaseModel #235 ( shyamd ) Substrates #231 ( shyamd ) Optimade Materials Doc #230 ( shyamd )","title":"v0.9.0 (2021-07-23)"},{"location":"CHANGELOG/#v083-2021-07-20","text":"Full Changelog Fixed bugs: Oxidation state composition fields not serialized properly #216 Closed issues: Feature Request: Robocrystallographer #208 Rotate structure to standard convention #111 Returned docs too large for common API queries (third-order elasticity) #76 Merged pull requests: Better Provenance Management #228 ( shyamd )","title":"v0.8.3 (2021-07-20)"},{"location":"CHANGELOG/#v082-2021-07-16","text":"Full Changelog Merged pull requests: Summary field bug fix #226 ( munrojm )","title":"v0.8.2 (2021-07-16)"},{"location":"CHANGELOG/#v081-2021-07-15","text":"Full Changelog Merged pull requests: Rename summary stats model #225 ( munrojm )","title":"v0.8.1 (2021-07-15)"},{"location":"CHANGELOG/#v080-2021-07-15","text":"Full Changelog Merged pull requests: Electronic structure and search builder updates #221 ( munrojm )","title":"v0.8.0 (2021-07-15)"},{"location":"CHANGELOG/#v072-2021-07-15","text":"Full Changelog Merged pull requests: Fix Deprecated Materials Speed #224 ( shyamd )","title":"v0.7.2 (2021-07-15)"},{"location":"CHANGELOG/#v071-2021-07-13","text":"Full Changelog","title":"v0.7.1 (2021-07-13)"},{"location":"CHANGELOG/#v070-2021-07-13","text":"Full Changelog Merged pull requests: Robocrystallographer document #222 ( shyamd )","title":"v0.7.0 (2021-07-13)"},{"location":"CHANGELOG/#v060-2021-07-12","text":"Full Changelog Merged pull requests: Add Deprecated Materials to MaterialsDoc construction #220 ( shyamd ) Fix provenance #219 ( shyamd )","title":"v0.6.0 (2021-07-12)"},{"location":"CHANGELOG/#v050-2021-07-02","text":"Full Changelog Merged pull requests: Fix Validation #215 ( shyamd )","title":"v0.5.0 (2021-07-02)"},{"location":"CHANGELOG/#v041-2021-06-27","text":"Full Changelog Merged pull requests: Fix oxidation doc composition #217 ( shyamd )","title":"v0.4.1 (2021-06-27)"},{"location":"CHANGELOG/#v040-2021-06-24","text":"Full Changelog Merged pull requests: Add R2SCAN to run_types #214 ( shyamd )","title":"v0.4.0 (2021-06-24)"},{"location":"CHANGELOG/#v036-2021-06-24","text":"Full Changelog Merged pull requests: Fix projection for vasp run_type determination #213 ( shyamd )","title":"v0.3.6 (2021-06-24)"},{"location":"CHANGELOG/#v035-2021-06-24","text":"Full Changelog Merged pull requests: Fix run_type in validation #212 ( shyamd )","title":"v0.3.5 (2021-06-24)"},{"location":"CHANGELOG/#v034-2021-06-23","text":"Full Changelog Merged pull requests: Bug: Reference the last calculation to determine run_type #211 ( shyamd )","title":"v0.3.4 (2021-06-23)"},{"location":"CHANGELOG/#v033-2021-06-23","text":"Full Changelog Merged pull requests: Remove bson package requirement #209 ( shyamd )","title":"v0.3.3 (2021-06-23)"},{"location":"CHANGELOG/#v032-2021-06-21","text":"Full Changelog Merged pull requests: Electronic Structure model and builder fixes #206 ( munrojm )","title":"v0.3.2 (2021-06-21)"},{"location":"CHANGELOG/#v031-2021-06-21","text":"Full Changelog Merged pull requests: Use deprecated tasks in Materials Builder #207 ( shyamd )","title":"v0.3.1 (2021-06-21)"},{"location":"CHANGELOG/#v030-2021-06-16","text":"Full Changelog Merged pull requests: Release Emmet Builders #205 ( shyamd )","title":"v0.3.0 (2021-06-16)"},{"location":"CHANGELOG/#v024-2021-06-14","text":"Full Changelog Merged pull requests: Revert materials finding to old pipeline behavior #203 ( shyamd )","title":"v0.2.4 (2021-06-14)"},{"location":"CHANGELOG/#v023-2021-06-07","text":"Full Changelog Merged pull requests: Fix oxidation document #201 ( shyamd )","title":"v0.2.3 (2021-06-07)"},{"location":"CHANGELOG/#v022-2021-06-04","text":"Full Changelog","title":"v0.2.2 (2021-06-04)"},{"location":"CHANGELOG/#v021-2021-06-03","text":"Full Changelog Merged pull requests: Reconcile changes on updates branch #199 ( shyamd ) Oxidation State Document #198 ( shyamd ) Move XAS Logic into document and clean up builder #197 ( shyamd ) Electronic structure and search components #189 ( munrojm )","title":"v0.2.1 (2021-06-03)"},{"location":"CHANGELOG/#v020-2021-05-10","text":"Full Changelog Closed issues: Bug: set's get serialized into set() rather than a list #183 task_type is moved to vasp/calc_type #121 Merged pull requests: various fixes to structure grouper an electrode documents and builders #178 ( jmmshn ) Updated materials and thermo builder #177 ( jmmshn ) Provenance Builder #176 ( shyamd ) relaxed enforced type of orig_input #175 ( jmmshn ) Fix serialization and update validation #174 ( shyamd ) Working Thermo Builder #170 ( jmmshn ) Add SCF gradient and Manual deprecation to VASP validation #169 ( shyamd ) Create MPID Type #167 ( shyamd ) Remove stubs in favor of monty pydantic compatability #165 ( shyamd ) made structure grouper work with material_ids #163 ( jmmshn ) minor changes to get material builder working on non-production databases. #162 ( jmmshn ) Electrode Doc #149 ( jmmshn ) Structure Group Docs and Builder #148 ( jmmshn ) Generate static run-types for IDEs #141 ( shyamd ) Added CrossRef builder #133 ( jmmshn ) Sanitize Enums #132 ( utf ) Use lattice model #131 ( utf ) cli: restoring tasks (bugfixes) #119 ( tschaume ) Emmet-Core Docs #117 ( shyamd ) Initial Documentation Structure #116 ( shyamd )","title":"v0.2.0 (2021-05-10)"},{"location":"CHANGELOG/#v011-alpha-2020-04-19","text":"Full Changelog","title":"v0.1.1-alpha (2020-04-19)"},{"location":"CHANGELOG/#v01-alpha-2020-04-19","text":"Full Changelog Closed issues: Conflicts in electrodes.py #108 Band gaps being reported differently from those described by mapidoc / the old builders #62 KeyError when running lu_field with a store already containing data #45 VaspDrone for emmet? #40 Merged pull requests: fixes for electrode builder #113 ( jmmshn ) Updates for the latest DB release #110 ( shyamd ) Working insertion electrodes builder #109 ( jmmshn ) Production updates for September 2019 #107 ( shyamd ) Update ICSD drone #105 ( kmu ) Change magnetism builder to build from tasks #104 ( mkhorton ) CLI: primitive structures, zip support, SNLs #101 ( tschaume ) Added StructurePredictionBuilder #98 ( mattmcdermott ) WIP: Initial creation of defects emmet builder #95 ( dbroberg ) WIP: Acceptance tests for deprecation guarding etc. #94 ( dwinston ) missing and (how did this work?) #93 ( tschaume ) Fix a bug in bond_valence #92 ( kmu ) bug fix #90 ( jmmshn ) Central repository for global variables #88 ( mkhorton ) WIP March Production Updates #87 ( shyamd ) Fixed sandbox bug and cleaned up #84 ( jmmshn ) Website Updates #82 ( shyamd ) Update to electrode builder to match the data required by the website builder #81 ( jmmshn ) Robocrystallographer audio builder #79 ( dwinston ) Build structure visualization JSON #78 ( mkhorton ) Add robocrys version to builder doc #75 ( utf ) Add robocrystallographer builder #74 ( utf ) [WIP] MPComplete status #73 ( dwinston ) Production Updates #72 ( shyamd ) fix: snl history is a list #70 ( dwinston ) Maggma update #69 ( shyamd ) [WIP] Update magnetic grouping #67 ( mkhorton ) Battery builder (work in progress) #66 ( jmmshn ) Production Updates #65 ( shyamd ) [WIP] Updates to magnetism, bond, mp_website builders, new bond_valence, mp_website_digest builders #64 ( mkhorton ) mp website update for propnet and toecs #63 ( montoyjh ) big elastic PR #61 ( montoyjh ) Added meta data & unit tests #60 ( nisse3000 ) Added composition descritpors for similarity toolbox #59 ( nisse3000 ) Fix 'magnestism' typo #58 ( mkhorton ) Removed min and max statistics from structure fingerprint #57 ( nisse3000 ) Updated site-descriptor calculation to reflect best settings. #56 ( nisse3000 ) [WIP] x-ray absorption spectra builder updates #55 ( dwinston ) Requested site-descriptor changes #53 ( nisse3000 ) Install openbabel in test env #52 ( dwinston ) More Updates for MP Website #49 ( shyamd ) Avoid hardcoding local settings path on serialization #48 ( dwinston ) Added BoltztrapDosBuilder class #42 ( fraricci ) [WIP] Command Line Interface #41 ( tschaume )","title":"v0.1-alpha (2020-04-19)"},{"location":"CHANGELOG/#v201867-2018-06-07","text":"Full Changelog","title":"v2018.6.7 (2018-06-07)"},{"location":"CHANGELOG/#v201866-2018-06-06","text":"Full Changelog Merged pull requests: Updates #47 ( shyamd ) Fix diffraction builder. Add test for fixed method. #46 ( dwinston ) Replace TopologyBuilder with BondBuilder #44 ( mkhorton ) Copybuilder additions #43 ( montoyjh ) Massive amounts of refactoring in main builders #39 ( shyamd ) Adaptions to new pymatgen version and requiring most recent pymatgen version #37 ( nisse3000 ) Fixes a few issues in wf builder and elastic builder #36 ( montoyjh ) Copybuilder bug - tqdm doesn't play nicely with next() #35 ( montoyjh ) Add tests for copybuilder. Was using old store attr lu_key . #34 ( dwinston ) README: editable install #33 ( tschaume ) Property workflow builder #32 ( montoyjh )","title":"v2018.6.6 (2018-06-06)"},{"location":"CHANGELOG/#v201842-2018-04-02","text":"Full Changelog Closed issues: A generalized warning generator for task documents? #26 Merged pull requests: Changed site-descriptor data structure & adapted structure similarity builder accordingly #31 ( nisse3000 ) Massive reorganization #28 ( shyamd ) Corrected setup.py #27 ( nisse3000 )","title":"v2018.4.2 (2018-04-02)"},{"location":"CHANGELOG/#v201839-2018-03-09","text":"Full Changelog Closed issues: SurfacePropertiesBuilder #23 Merged pull requests: Massive changeset for Production #25 ( shyamd ) Restructured site-descriptor storage #24 ( nisse3000 ) Added a site-descriptor builder #22 ( nisse3000 ) Builder updates (topology) #21 ( mkhorton ) Compatibility and elastic builders #20 ( montoyjh ) Fix substrates builder #18 ( dwinston ) abinit phonon builder #16 ( gpetretto )","title":"v2018.3.9 (2018-03-09)"},{"location":"CHANGELOG/#v201811-2017-12-16","text":"Full Changelog","title":"v2018.1.1 (2017-12-16)"},{"location":"CHANGELOG/#v2017118-2017-11-07","text":"Full Changelog Closed issues: PyPi package #2 Merged pull requests: Readme update #15 ( mkhorton ) Initial topology builder #10 ( mkhorton ) Small update to README #9 ( mkhorton ) Small README update #8 ( mkhorton ) ICSD drone #7 ( JPalakapilly ) Fix sample script in README #6 ( mkhorton ) Minor doc update #5 ( mkhorton ) Initial commit for some documentation (in progress) #4 ( mkhorton ) Materials builder #3 ( shyamd ) Task tagger #1 ( shyamd ) * This Changelog was automatically generated by github_changelog_generator","title":"v2017.11.8 (2017-11-07)"},{"location":"core/","text":"Emmet-Core \u00b6 The core module defines the data models for the Materials API (MAPI): \u00b6 CrystalSystem \u00b6 The crystal system of the lattice SymmetryData pydantic-model \u00b6 Defines a symmetry data set for materials documents crystal_system: CrystalSystem pydantic-field \u00b6 The crystal system for this lattice number: int pydantic-field \u00b6 The spacegroup number for the lattice point_group: str pydantic-field \u00b6 The point group for the lattice symbol: str pydantic-field \u00b6 The spacegroup symbol for the lattice symprec: float pydantic-field \u00b6 The precision given to spglib to determine the symmetry of this lattice \u00b6 Core definition of Structure metadata StructureMetadata pydantic-model \u00b6 Mix-in class for structure metadata chemsys: str pydantic-field \u00b6 dash-delimited string of elements in the material composition: Composition pydantic-field \u00b6 Full composition for the material composition_reduced: Composition pydantic-field \u00b6 Simplified representation of the composition density: float pydantic-field \u00b6 Density in grams per cm^3 density_atomic: float pydantic-field \u00b6 The atomic packing density in atoms per cm^3 elements: Element pydantic-field \u00b6 List of elements in the material formula_anonymous: str pydantic-field \u00b6 Anonymized representation of the formula formula_pretty: str pydantic-field \u00b6 Cleaned representation of the formula nsites: int pydantic-field \u00b6 Total number of sites in the structure structure: Structure pydantic-field \u00b6 The structure for this metadata symmetry: SymmetryData pydantic-field \u00b6 Symmetry data for this material volume: float pydantic-field \u00b6 Total volume for this structure in Angstroms^3 \u00b6 Core definition of a Materials Document MaterialsDoc pydantic-model \u00b6 Definition for a core Materials Document calc_types: str pydantic-field \u00b6 Calculation types for all the calculations that make up this material created_at: datetime pydantic-field \u00b6 Timestamp for when this material document was first created deprecated: bool pydantic-field \u00b6 Whether this materials document is deprecated. initial_structures: Structure pydantic-field \u00b6 Initial structures used in the DFT optimizations corresponding to this material last_updated: datetime pydantic-field \u00b6 Timestamp for when this document was last updated material_id: MPID pydantic-field required \u00b6 The ID of this material, used as a universal reference across proeprty documents.This comes in the form and MPID or int origins: PropertyOrigin pydantic-field \u00b6 Dictionary for tracking the provenance of properties task_ids: MPID pydantic-field \u00b6 List of Calculations IDs used to make this Materials Document warnings: str pydantic-field \u00b6 Any warnings related to this material from_structure ( structure , material_id , ** kwargs ) classmethod \u00b6 Builds a materials document using the minimal amount of information Source code in core/material.py @classmethod def from_structure ( # type: ignore[override] cls : Type [ T ], structure : Structure , material_id : MPID , ** kwargs ) -> T : \"\"\" Builds a materials document using the minimal amount of information \"\"\" return super () . from_structure ( # type: ignore structure = structure , material_id = material_id , include_structure = True , ** kwargs ) PropertyOrigin pydantic-model \u00b6 Provenance document for the origin of properties in a material document last_updated: datetime pydantic-field \u00b6 The timestamp when this calculation was last updated name: str pydantic-field required \u00b6 The property name task_id: MPID pydantic-field required \u00b6 The calculation ID this property comes from \u00b6 Core definition of a Thermo Document DecompositionProduct pydantic-model \u00b6 Entry metadata for a decomposition process amount: float pydantic-field \u00b6 The amount of the decomposed material by formula units this this material decomposes to formula: str pydantic-field \u00b6 The formula of the decomposed material this material decomposes to material_id: MPID pydantic-field \u00b6 The material this decomposition points to ThermoDoc pydantic-model \u00b6 A thermo entry document decomposes_to: DecompositionProduct pydantic-field \u00b6 List of decomposition data for this material. Only valid for metastable or unstable material. energy_above_hull: float pydantic-field required \u00b6 The energy above the hull in eV/Atom energy_per_atom: float pydantic-field required \u00b6 The total corrected DFT energy of this material per atom in eV/atom energy_type: str pydantic-field required \u00b6 The type of calculation this energy evaluation comes from. TODO: Convert to enum? entries: Union [ pymatgen . entries . computed_entries . ComputedEntry , pymatgen . entries . computed_entries . ComputedStructureEntry ] pydantic-field required \u00b6 List of all entries that are valid for this material. The keys for this dictionary are names of various calculation types entry_types: str pydantic-field required \u00b6 List of available energy types computed for this material equilibrium_reaction_energy_per_atom: float pydantic-field \u00b6 The reaction energy of a stable entry from the neighboring equilibrium stable materials in eV. Also known as the inverse distance to hull. formation_energy_per_atom: float pydantic-field \u00b6 The formation energy per atom in eV/atom is_stable: bool pydantic-field \u00b6 Flag for whether this material is on the hull and therefore stable uncorrected_energy_per_atom: float pydantic-field required \u00b6 The total DFT energy of this material per atom in eV/atom \u00b6 Core definition of a Provenance Document Author pydantic-model \u00b6 Author information Database \u00b6 Database identifiers for provenance IDs History pydantic-model \u00b6 History of the material provenance description: ~ VT pydantic-field \u00b6 Dictionary of exra data for this history node experimental: bool pydantic-field \u00b6 Whether this node dictates this is an experimental history not ProvenanceDoc pydantic-model \u00b6 A provenance property block authors: Author pydantic-field \u00b6 List of authors for this material created_at: datetime pydantic-field required \u00b6 creation date for the first structure corresponding to this material database_IDs: List [ str ] pydantic-field \u00b6 Database IDs corresponding to this material history: History pydantic-field \u00b6 List of history nodes specifying the transformations or orignation of this material for the entry closest matching the material input references: str pydantic-field \u00b6 Bibtex reference strings for this material remarks: str pydantic-field \u00b6 List of remarks for the provenance of this material theoretical: bool pydantic-field \u00b6 If this material has any experimental provenance or not from_SNLs ( material_id , snls ) classmethod \u00b6 Converts legacy Pymatgen SNLs into a single provenance document Source code in core/provenance.py @classmethod def from_SNLs ( cls , material_id : MPID , snls : List [ SNLDict ], ) -> \"ProvenanceDoc\" : \"\"\" Converts legacy Pymatgen SNLs into a single provenance document \"\"\" assert ( len ( snls ) > 0 ), \"Error must provide a non-zero list of SNLs to convert from SNLs\" # Choose earliest created_at created_at = min ([ snl . about . created_at for snl in snls ]) last_updated = max ([ snl . about . created_at for snl in snls ]) # Choose earliest history history = sorted ( snls , key = lambda snl : snl . about . created_at )[ 0 ] . about . history # Aggregate all references into one dict to remove duplicates refs = {} for snl in snls : try : set_strict_mode ( False ) entries = parse_string ( snl . about . references , bib_format = \"bibtex\" ) refs . update ( entries . entries ) except Exception as e : warnings . warn ( f \"Failed parsing bibtex: { snl . about . references } due to { e } \" ) bib_data = BibliographyData ( entries = refs ) references = [ ref . to_string ( \"bibtex\" ) for ref in bib_data . entries . values ()] # TODO: Maybe we should combine this robocrystallographer? # TODO: Refine these tags / remarks remarks = list ( set ([ remark for snl in snls for remark in snl . about . remarks ])) tags = [ r for r in remarks if len ( r ) < 140 ] authors = [ entry for snl in snls for entry in snl . about . authors ] # Check if this entry is experimental experimental = any ( history . experimental for snl in snls for history in snl . about . history ) # Aggregate all the database IDs snl_ids = { snl . snl_id for snl in snls } db_ids = { Database ( db_id ): [ snl_id for snl_id in snl_ids if db_id in snl_id ] for db_id in map ( str , Database ) } # remove Nones and empty lists db_ids = { k : list ( filter ( None , v )) for k , v in db_ids . items ()} db_ids = { k : v for k , v in db_ids . items () if len ( v ) > 0 } fields = { \"created_at\" : created_at , \"references\" : references , \"authors\" : authors , \"remarks\" : remarks , \"tags\" : tags , \"database_IDs\" : db_ids , \"theoretical\" : not experimental , \"history\" : history , } return ProvenanceDoc ( material_id = material_id , last_updated = last_updated , ** fields ) SNLAbout pydantic-model \u00b6 A data dictionary definining extra fields in a SNL authors: Author pydantic-field \u00b6 List of authors for this material created_at: datetime pydantic-field \u00b6 The creation date for this SNL database_IDs: List [ str ] pydantic-field \u00b6 Database IDs corresponding to this material history: History pydantic-field \u00b6 List of history nodes specifying the transformations or orignation of this material for the entry closest matching the material input references: str pydantic-field \u00b6 Bibtex reference strings for this material remarks: str pydantic-field \u00b6 List of remarks for the provenance of this material SNLDict pydantic-model \u00b6 Pydantic validated dictionary for SNL snl_id: str pydantic-field required \u00b6 The SNL ID for this entry \u00b6 Core definition for Polar property Document Dielectric pydantic-model \u00b6 A dielectric property block e_electronic: float pydantic-field required \u00b6 Electric permittivity due to electrons rearrangement e_ionic: float pydantic-field required \u00b6 Electric permittivity from atomic rearrangement e_total: float pydantic-field required \u00b6 Total electric permittivity electronic: Tuple [ Tuple [ float , float , float ], Tuple [ float , float , float ], Tuple [ float , float , float ]] pydantic-field required \u00b6 Dielectric response due to electron rearrangement ionic: Tuple [ Tuple [ float , float , float ], Tuple [ float , float , float ], Tuple [ float , float , float ]] pydantic-field required \u00b6 Dielectric response due to atomic rearrangement total: Tuple [ Tuple [ float , float , float ], Tuple [ float , float , float ], Tuple [ float , float , float ]] pydantic-field required \u00b6 Total dielectric response Piezoelectric pydantic-model \u00b6 A dielectric package block max_direction: Tuple [ int , int , int ] pydantic-field \u00b6 Miller direction for maximum piezo response strain_for_max: Tuple [ Tuple [ float , float , float ], Tuple [ float , float , float ], Tuple [ float , float , float ]] pydantic-field \u00b6 Normalized strain direction for maximum piezo repsonse","title":"Core"},{"location":"core/#emmet-core","text":"The core module defines the data models for the Materials API (MAPI):","title":"Emmet-Core"},{"location":"core/#emmet.core.symmetry","text":"","title":"emmet.core.symmetry"},{"location":"core/#emmet.core.symmetry.CrystalSystem","text":"The crystal system of the lattice","title":"CrystalSystem"},{"location":"core/#emmet.core.symmetry.SymmetryData","text":"Defines a symmetry data set for materials documents","title":"SymmetryData"},{"location":"core/#emmet.core.symmetry.SymmetryData.crystal_system","text":"The crystal system for this lattice","title":"crystal_system"},{"location":"core/#emmet.core.symmetry.SymmetryData.number","text":"The spacegroup number for the lattice","title":"number"},{"location":"core/#emmet.core.symmetry.SymmetryData.point_group","text":"The point group for the lattice","title":"point_group"},{"location":"core/#emmet.core.symmetry.SymmetryData.symbol","text":"The spacegroup symbol for the lattice","title":"symbol"},{"location":"core/#emmet.core.symmetry.SymmetryData.symprec","text":"The precision given to spglib to determine the symmetry of this lattice","title":"symprec"},{"location":"core/#emmet.core.structure","text":"Core definition of Structure metadata","title":"emmet.core.structure"},{"location":"core/#emmet.core.structure.StructureMetadata","text":"Mix-in class for structure metadata","title":"StructureMetadata"},{"location":"core/#emmet.core.structure.StructureMetadata.chemsys","text":"dash-delimited string of elements in the material","title":"chemsys"},{"location":"core/#emmet.core.structure.StructureMetadata.composition","text":"Full composition for the material","title":"composition"},{"location":"core/#emmet.core.structure.StructureMetadata.composition_reduced","text":"Simplified representation of the composition","title":"composition_reduced"},{"location":"core/#emmet.core.structure.StructureMetadata.density","text":"Density in grams per cm^3","title":"density"},{"location":"core/#emmet.core.structure.StructureMetadata.density_atomic","text":"The atomic packing density in atoms per cm^3","title":"density_atomic"},{"location":"core/#emmet.core.structure.StructureMetadata.elements","text":"List of elements in the material","title":"elements"},{"location":"core/#emmet.core.structure.StructureMetadata.formula_anonymous","text":"Anonymized representation of the formula","title":"formula_anonymous"},{"location":"core/#emmet.core.structure.StructureMetadata.formula_pretty","text":"Cleaned representation of the formula","title":"formula_pretty"},{"location":"core/#emmet.core.structure.StructureMetadata.nsites","text":"Total number of sites in the structure","title":"nsites"},{"location":"core/#emmet.core.structure.StructureMetadata.structure","text":"The structure for this metadata","title":"structure"},{"location":"core/#emmet.core.structure.StructureMetadata.symmetry","text":"Symmetry data for this material","title":"symmetry"},{"location":"core/#emmet.core.structure.StructureMetadata.volume","text":"Total volume for this structure in Angstroms^3","title":"volume"},{"location":"core/#emmet.core.material","text":"Core definition of a Materials Document","title":"emmet.core.material"},{"location":"core/#emmet.core.material.MaterialsDoc","text":"Definition for a core Materials Document","title":"MaterialsDoc"},{"location":"core/#emmet.core.material.MaterialsDoc.calc_types","text":"Calculation types for all the calculations that make up this material","title":"calc_types"},{"location":"core/#emmet.core.material.MaterialsDoc.created_at","text":"Timestamp for when this material document was first created","title":"created_at"},{"location":"core/#emmet.core.material.MaterialsDoc.deprecated","text":"Whether this materials document is deprecated.","title":"deprecated"},{"location":"core/#emmet.core.material.MaterialsDoc.initial_structures","text":"Initial structures used in the DFT optimizations corresponding to this material","title":"initial_structures"},{"location":"core/#emmet.core.material.MaterialsDoc.last_updated","text":"Timestamp for when this document was last updated","title":"last_updated"},{"location":"core/#emmet.core.material.MaterialsDoc.material_id","text":"The ID of this material, used as a universal reference across proeprty documents.This comes in the form and MPID or int","title":"material_id"},{"location":"core/#emmet.core.material.MaterialsDoc.origins","text":"Dictionary for tracking the provenance of properties","title":"origins"},{"location":"core/#emmet.core.material.MaterialsDoc.task_ids","text":"List of Calculations IDs used to make this Materials Document","title":"task_ids"},{"location":"core/#emmet.core.material.MaterialsDoc.warnings","text":"Any warnings related to this material","title":"warnings"},{"location":"core/#emmet.core.material.MaterialsDoc.from_structure","text":"Builds a materials document using the minimal amount of information Source code in core/material.py @classmethod def from_structure ( # type: ignore[override] cls : Type [ T ], structure : Structure , material_id : MPID , ** kwargs ) -> T : \"\"\" Builds a materials document using the minimal amount of information \"\"\" return super () . from_structure ( # type: ignore structure = structure , material_id = material_id , include_structure = True , ** kwargs )","title":"from_structure()"},{"location":"core/#emmet.core.material.PropertyOrigin","text":"Provenance document for the origin of properties in a material document","title":"PropertyOrigin"},{"location":"core/#emmet.core.material.PropertyOrigin.last_updated","text":"The timestamp when this calculation was last updated","title":"last_updated"},{"location":"core/#emmet.core.material.PropertyOrigin.name","text":"The property name","title":"name"},{"location":"core/#emmet.core.material.PropertyOrigin.task_id","text":"The calculation ID this property comes from","title":"task_id"},{"location":"core/#emmet.core.thermo","text":"Core definition of a Thermo Document","title":"emmet.core.thermo"},{"location":"core/#emmet.core.thermo.DecompositionProduct","text":"Entry metadata for a decomposition process","title":"DecompositionProduct"},{"location":"core/#emmet.core.thermo.DecompositionProduct.amount","text":"The amount of the decomposed material by formula units this this material decomposes to","title":"amount"},{"location":"core/#emmet.core.thermo.DecompositionProduct.formula","text":"The formula of the decomposed material this material decomposes to","title":"formula"},{"location":"core/#emmet.core.thermo.DecompositionProduct.material_id","text":"The material this decomposition points to","title":"material_id"},{"location":"core/#emmet.core.thermo.ThermoDoc","text":"A thermo entry document","title":"ThermoDoc"},{"location":"core/#emmet.core.thermo.ThermoDoc.decomposes_to","text":"List of decomposition data for this material. Only valid for metastable or unstable material.","title":"decomposes_to"},{"location":"core/#emmet.core.thermo.ThermoDoc.energy_above_hull","text":"The energy above the hull in eV/Atom","title":"energy_above_hull"},{"location":"core/#emmet.core.thermo.ThermoDoc.energy_per_atom","text":"The total corrected DFT energy of this material per atom in eV/atom","title":"energy_per_atom"},{"location":"core/#emmet.core.thermo.ThermoDoc.energy_type","text":"The type of calculation this energy evaluation comes from. TODO: Convert to enum?","title":"energy_type"},{"location":"core/#emmet.core.thermo.ThermoDoc.entries","text":"List of all entries that are valid for this material. The keys for this dictionary are names of various calculation types","title":"entries"},{"location":"core/#emmet.core.thermo.ThermoDoc.entry_types","text":"List of available energy types computed for this material","title":"entry_types"},{"location":"core/#emmet.core.thermo.ThermoDoc.equilibrium_reaction_energy_per_atom","text":"The reaction energy of a stable entry from the neighboring equilibrium stable materials in eV. Also known as the inverse distance to hull.","title":"equilibrium_reaction_energy_per_atom"},{"location":"core/#emmet.core.thermo.ThermoDoc.formation_energy_per_atom","text":"The formation energy per atom in eV/atom","title":"formation_energy_per_atom"},{"location":"core/#emmet.core.thermo.ThermoDoc.is_stable","text":"Flag for whether this material is on the hull and therefore stable","title":"is_stable"},{"location":"core/#emmet.core.thermo.ThermoDoc.uncorrected_energy_per_atom","text":"The total DFT energy of this material per atom in eV/atom","title":"uncorrected_energy_per_atom"},{"location":"core/#emmet.core.provenance","text":"Core definition of a Provenance Document","title":"emmet.core.provenance"},{"location":"core/#emmet.core.provenance.Author","text":"Author information","title":"Author"},{"location":"core/#emmet.core.provenance.Database","text":"Database identifiers for provenance IDs","title":"Database"},{"location":"core/#emmet.core.provenance.History","text":"History of the material provenance","title":"History"},{"location":"core/#emmet.core.provenance.History.description","text":"Dictionary of exra data for this history node","title":"description"},{"location":"core/#emmet.core.provenance.History.experimental","text":"Whether this node dictates this is an experimental history not","title":"experimental"},{"location":"core/#emmet.core.provenance.ProvenanceDoc","text":"A provenance property block","title":"ProvenanceDoc"},{"location":"core/#emmet.core.provenance.ProvenanceDoc.authors","text":"List of authors for this material","title":"authors"},{"location":"core/#emmet.core.provenance.ProvenanceDoc.created_at","text":"creation date for the first structure corresponding to this material","title":"created_at"},{"location":"core/#emmet.core.provenance.ProvenanceDoc.database_IDs","text":"Database IDs corresponding to this material","title":"database_IDs"},{"location":"core/#emmet.core.provenance.ProvenanceDoc.history","text":"List of history nodes specifying the transformations or orignation of this material for the entry closest matching the material input","title":"history"},{"location":"core/#emmet.core.provenance.ProvenanceDoc.references","text":"Bibtex reference strings for this material","title":"references"},{"location":"core/#emmet.core.provenance.ProvenanceDoc.remarks","text":"List of remarks for the provenance of this material","title":"remarks"},{"location":"core/#emmet.core.provenance.ProvenanceDoc.theoretical","text":"If this material has any experimental provenance or not","title":"theoretical"},{"location":"core/#emmet.core.provenance.ProvenanceDoc.from_SNLs","text":"Converts legacy Pymatgen SNLs into a single provenance document Source code in core/provenance.py @classmethod def from_SNLs ( cls , material_id : MPID , snls : List [ SNLDict ], ) -> \"ProvenanceDoc\" : \"\"\" Converts legacy Pymatgen SNLs into a single provenance document \"\"\" assert ( len ( snls ) > 0 ), \"Error must provide a non-zero list of SNLs to convert from SNLs\" # Choose earliest created_at created_at = min ([ snl . about . created_at for snl in snls ]) last_updated = max ([ snl . about . created_at for snl in snls ]) # Choose earliest history history = sorted ( snls , key = lambda snl : snl . about . created_at )[ 0 ] . about . history # Aggregate all references into one dict to remove duplicates refs = {} for snl in snls : try : set_strict_mode ( False ) entries = parse_string ( snl . about . references , bib_format = \"bibtex\" ) refs . update ( entries . entries ) except Exception as e : warnings . warn ( f \"Failed parsing bibtex: { snl . about . references } due to { e } \" ) bib_data = BibliographyData ( entries = refs ) references = [ ref . to_string ( \"bibtex\" ) for ref in bib_data . entries . values ()] # TODO: Maybe we should combine this robocrystallographer? # TODO: Refine these tags / remarks remarks = list ( set ([ remark for snl in snls for remark in snl . about . remarks ])) tags = [ r for r in remarks if len ( r ) < 140 ] authors = [ entry for snl in snls for entry in snl . about . authors ] # Check if this entry is experimental experimental = any ( history . experimental for snl in snls for history in snl . about . history ) # Aggregate all the database IDs snl_ids = { snl . snl_id for snl in snls } db_ids = { Database ( db_id ): [ snl_id for snl_id in snl_ids if db_id in snl_id ] for db_id in map ( str , Database ) } # remove Nones and empty lists db_ids = { k : list ( filter ( None , v )) for k , v in db_ids . items ()} db_ids = { k : v for k , v in db_ids . items () if len ( v ) > 0 } fields = { \"created_at\" : created_at , \"references\" : references , \"authors\" : authors , \"remarks\" : remarks , \"tags\" : tags , \"database_IDs\" : db_ids , \"theoretical\" : not experimental , \"history\" : history , } return ProvenanceDoc ( material_id = material_id , last_updated = last_updated , ** fields )","title":"from_SNLs()"},{"location":"core/#emmet.core.provenance.SNLAbout","text":"A data dictionary definining extra fields in a SNL","title":"SNLAbout"},{"location":"core/#emmet.core.provenance.SNLAbout.authors","text":"List of authors for this material","title":"authors"},{"location":"core/#emmet.core.provenance.SNLAbout.created_at","text":"The creation date for this SNL","title":"created_at"},{"location":"core/#emmet.core.provenance.SNLAbout.database_IDs","text":"Database IDs corresponding to this material","title":"database_IDs"},{"location":"core/#emmet.core.provenance.SNLAbout.history","text":"List of history nodes specifying the transformations or orignation of this material for the entry closest matching the material input","title":"history"},{"location":"core/#emmet.core.provenance.SNLAbout.references","text":"Bibtex reference strings for this material","title":"references"},{"location":"core/#emmet.core.provenance.SNLAbout.remarks","text":"List of remarks for the provenance of this material","title":"remarks"},{"location":"core/#emmet.core.provenance.SNLDict","text":"Pydantic validated dictionary for SNL","title":"SNLDict"},{"location":"core/#emmet.core.provenance.SNLDict.snl_id","text":"The SNL ID for this entry","title":"snl_id"},{"location":"core/#emmet.core.polar","text":"Core definition for Polar property Document","title":"emmet.core.polar"},{"location":"core/#emmet.core.polar.Dielectric","text":"A dielectric property block","title":"Dielectric"},{"location":"core/#emmet.core.polar.Dielectric.e_electronic","text":"Electric permittivity due to electrons rearrangement","title":"e_electronic"},{"location":"core/#emmet.core.polar.Dielectric.e_ionic","text":"Electric permittivity from atomic rearrangement","title":"e_ionic"},{"location":"core/#emmet.core.polar.Dielectric.e_total","text":"Total electric permittivity","title":"e_total"},{"location":"core/#emmet.core.polar.Dielectric.electronic","text":"Dielectric response due to electron rearrangement","title":"electronic"},{"location":"core/#emmet.core.polar.Dielectric.ionic","text":"Dielectric response due to atomic rearrangement","title":"ionic"},{"location":"core/#emmet.core.polar.Dielectric.total","text":"Total dielectric response","title":"total"},{"location":"core/#emmet.core.polar.Piezoelectric","text":"A dielectric package block","title":"Piezoelectric"},{"location":"core/#emmet.core.polar.Piezoelectric.max_direction","text":"Miller direction for maximum piezo response","title":"max_direction"},{"location":"core/#emmet.core.polar.Piezoelectric.strain_for_max","text":"Normalized strain direction for maximum piezo repsonse","title":"strain_for_max"},{"location":"packages/","text":"Packages \u00b6 emmet is a toolkit of packages that are used in conjunction to create the Materials API (MAPI) from raw calculations on disk. The following package make up this toolkit. emmet-core \u00b6 This is the core package for the emmet ecosystem. emmet.core is where data models are defined. These data models are the most important part of emmet since they dictate what all the other packages have to use, serve, or compute. emmet-cli \u00b6 Many of the operations in emmet are complex. These range from backing up calculations, to parsing, to setting of build chains, to starting workflows. Since these processes are pretty standard, the emmet ecosystem provides a CLI implemented in emmet.cli . This makes managing MAPI much easier. emmet-builders \u00b6 The data served via MAPI has to computed via data pipelines. emmet.builders defines these operations using the maggma framework to enable well constructed data access, multi- and distributed processing, reporting, and automatic incremental computation.","title":"Packages"},{"location":"packages/#packages","text":"emmet is a toolkit of packages that are used in conjunction to create the Materials API (MAPI) from raw calculations on disk. The following package make up this toolkit.","title":"Packages"},{"location":"packages/#emmet-core","text":"This is the core package for the emmet ecosystem. emmet.core is where data models are defined. These data models are the most important part of emmet since they dictate what all the other packages have to use, serve, or compute.","title":"emmet-core"},{"location":"packages/#emmet-cli","text":"Many of the operations in emmet are complex. These range from backing up calculations, to parsing, to setting of build chains, to starting workflows. Since these processes are pretty standard, the emmet ecosystem provides a CLI implemented in emmet.cli . This makes managing MAPI much easier.","title":"emmet-cli"},{"location":"packages/#emmet-builders","text":"The data served via MAPI has to computed via data pipelines. emmet.builders defines these operations using the maggma framework to enable well constructed data access, multi- and distributed processing, reporting, and automatic incremental computation.","title":"emmet-builders"},{"location":"settings/","text":"Settings Management \u00b6 emmet has a flexible settings management system based on Pydantic's BaseSetting . A core EmmetSettings class is used to define a data model for settings. EmmetSettings will automatically use the emmet_config_path environment variable (defaults to $HOME/.emmet.json ) to load the settings for the whole emmet system. By inheriting from this class, any subpackage automatically gets this core loading feature. Example: from pydantic import Field from emmet.settings import EmmetSettings class MySettings ( EmmetSettings ): my_new_setting : int = Field ( 3 , description = \"A custom setting\" ) Now any instance of MySettings will automatically load the configuration file and use that to initialize this setting. Using the magic of pydantic BaseSettings , these settings can also be set using environment variables prefixed by EMMET_ . export EMMET_MY_NEW_SETTING = 4","title":"Settings"},{"location":"settings/#settings-management","text":"emmet has a flexible settings management system based on Pydantic's BaseSetting . A core EmmetSettings class is used to define a data model for settings. EmmetSettings will automatically use the emmet_config_path environment variable (defaults to $HOME/.emmet.json ) to load the settings for the whole emmet system. By inheriting from this class, any subpackage automatically gets this core loading feature. Example: from pydantic import Field from emmet.settings import EmmetSettings class MySettings ( EmmetSettings ): my_new_setting : int = Field ( 3 , description = \"A custom setting\" ) Now any instance of MySettings will automatically load the configuration file and use that to initialize this setting. Using the magic of pydantic BaseSettings , these settings can also be set using environment variables prefixed by EMMET_ . export EMMET_MY_NEW_SETTING = 4","title":"Settings Management"}]}